"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[77296],{77296:function(e,t,l){l.r(t),l.d(t,{default:function(){return X}});var a=l(67294),n=l(81254),r=l(26372),m=l(18922),s=["components"];function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e},d.apply(this,arguments)}function o(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var i={},u="wrapper";function c(e){var t=e.components,l=o(e,s);return(0,n.mdx)(u,d({},i,l,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { ResultNameHeaderCell } from 'terra-clinical-result/lib/index';\n\nexport default () => <ResultNameHeaderCell resultName=\"Blood Pressure\" unit=\"mmHg\" />;\n\n")))}c.isMDXComponent=!0;var p=l(49271),f=function(e){var t=e.title,l=e.description,n=e.isExpanded;return a.createElement(p.Z,{title:t||"Result Name Header Cell",description:l,example:a.createElement(m.Z,null),exampleSrc:a.createElement(c,null),isExpanded:n})},x=l(17093),N=["components"];function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e},y.apply(this,arguments)}function h(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var g={},v="wrapper";function b(e){var t=e.components,l=h(e,N);return(0,n.mdx)(v,y({},g,l,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { ResultNameHeaderCell } from 'terra-clinical-result/lib';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst ResultNameColumnFlowsheetExample = () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-firstcolumn')}>\n        <div className={cx('mock-flowsheet-firstcolumn-cell')}>\n          <ResultNameHeaderCell resultName=\"Temp\" unit=\"degC\" />\n        </div>\n        <div className={cx(['mock-flowsheet-firstcolumn-cell', 'zebra'])}>\n          <ResultNameHeaderCell resultName=\"HR\" unit=\"bpm\" />\n        </div>\n        <div className={cx('mock-flowsheet-firstcolumn-cell')}>\n          <ResultNameHeaderCell resultName=\"BP\" unit=\"mmHg\" />\n        </div>\n        <div className={cx(['mock-flowsheet-firstcolumn-cell', 'zebra'])}>\n          <ResultNameHeaderCell resultName=\"Mean Arterial Pressure, Cuff\" unit=\"mmHg\" typeIndicator=\"calculated\" />\n        </div>\n        <div className={cx('mock-flowsheet-firstcolumn-cell')}>\n          <ResultNameHeaderCell resultName=\"Respiratory Rate\" unit=\"br/min\" />\n        </div>\n        <div className={cx(['mock-flowsheet-firstcolumn-cell', 'zebra'])}>\n          <ResultNameHeaderCell resultName=\"SpO2\" unit=\"%\" />\n        </div>\n        <div className={cx('mock-flowsheet-firstcolumn-cell')}>\n          <ResultNameHeaderCell resultName=\"Height/Length Dosing\" unit=\"cm\" />\n        </div>\n        <div className={cx(['mock-flowsheet-firstcolumn-cell', 'zebra'])}>\n          <ResultNameHeaderCell resultName=\"Height/Length Measured\" unit=\"cm\" />\n        </div>\n        <div className={cx('mock-flowsheet-firstcolumn-cell')}>\n          <ResultNameHeaderCell resultName=\"Weight Dosing\" unit=\"kg\" />\n        </div>\n        <div className={cx(['mock-flowsheet-firstcolumn-cell', 'zebra'])}>\n          <ResultNameHeaderCell resultName=\"Weight Measured\" unit=\"kg\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultNameColumnFlowsheetExample;\n\n")))}b.isMDXComponent=!0;var C=l(98568),w=function(e){var t=e.title,l=e.description,n=e.isExpanded;return a.createElement(p.Z,{title:t||"Result Name Header Flowsheet Example",description:l,example:a.createElement(x.Z,null),exampleCssSrc:a.createElement(C.Z,null),exampleSrc:a.createElement(b,null),isExpanded:n})},R=l(78530),O=["components"];function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e},E.apply(this,arguments)}function H(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var T={},k="wrapper";function j(e){var t=e.components,l=H(e,O);return(0,n.mdx)(k,E({},T,l,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)(R.ZP,{mdxType:"PropsTable"},(0,n.mdx)(R.X2,{key:"ROW1",mdxType:"Row"},(0,n.mdx)(R.O,{mdxType:"PropNameCell"},"resultName"),(0,n.mdx)(R.Di,{mdxType:"TypeCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,n.mdx)(R.dS,{isRequired:!0,mdxType:"RequiredCell"}),(0,n.mdx)(R.mW,{mdxType:"DefaultValueCell"},(0,n.mdx)("p",null,"none")),(0,n.mdx)(R.Ex,{mdxType:"DescriptionCell"},(0,n.mdx)("p",null,"Content to be displayed for the Result Name row label."))),(0,n.mdx)(R.X2,{key:"ROW2",mdxType:"Row"},(0,n.mdx)(R.O,{mdxType:"PropNameCell"},"unit"),(0,n.mdx)(R.Di,{mdxType:"TypeCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"string\n"))),(0,n.mdx)(R.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,n.mdx)(R.mW,{mdxType:"DefaultValueCell"},(0,n.mdx)("p",null,"none")),(0,n.mdx)(R.Ex,{mdxType:"DescriptionCell"},(0,n.mdx)("p",null,"Content to be displayed as the supporting Unit of Measure row label."))),(0,n.mdx)(R.X2,{key:"ROW3",mdxType:"Row"},(0,n.mdx)(R.O,{mdxType:"PropNameCell"},"paddingStyle"),(0,n.mdx)(R.Di,{mdxType:"TypeCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"enum: [\n  'none'\n  'compact'\n  'standard'\n],\n"))),(0,n.mdx)(R.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,n.mdx)(R.mW,{mdxType:"DefaultValueCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"'compact'\n"))),(0,n.mdx)(R.Ex,{mdxType:"DescriptionCell"},(0,n.mdx)("p",null,"The padding styling to apply to the Result Name row header cell.\nOne of ",(0,n.mdx)("inlineCode",{parentName:"p"},"'none'"),", ",(0,n.mdx)("inlineCode",{parentName:"p"},"'compact'"),", or ",(0,n.mdx)("inlineCode",{parentName:"p"},"'standard'"),"."))),(0,n.mdx)(R.X2,{key:"ROW4",mdxType:"Row"},(0,n.mdx)(R.O,{mdxType:"PropNameCell"},"typeIndicator"),(0,n.mdx)(R.Di,{mdxType:"TypeCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"enum: [\n  'none'\n  'calculated'\n],\n"))),(0,n.mdx)(R.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,n.mdx)(R.mW,{mdxType:"DefaultValueCell"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-javascript"},"'none'\n"))),(0,n.mdx)(R.Ex,{mdxType:"DescriptionCell"},(0,n.mdx)("p",null,"Adds additional icon at beginning of row before the ResultName, indicating special information about results or cells.\nOne of ",(0,n.mdx)("inlineCode",{parentName:"p"},"'none'")," or ",(0,n.mdx)("inlineCode",{parentName:"p"},"'calculated'"),".")))))}j.isMDXComponent=!0;var P=["components"];function D(){return D=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a])}return e},D.apply(this,arguments)}function S(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var M={},W="wrapper";function X(e){var t=e.components,l=S(e,P);return(0,n.mdx)(W,D({},M,l,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)(r.C,{mdxType:"Badge"}),(0,n.mdx)("h1",{id:"result-name-header-cell"},"Result Name Header Cell"),(0,n.mdx)("p",null,"Result-Name-Header-Cell is a component of terra-clinical-result that creates a standardized view for the Result Name and Unit of Measure in the first column (row header) for each row within a flowsheet."),(0,n.mdx)("h2",{id:"getting-started"},"Getting Started"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"Install with ",(0,n.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",(0,n.mdx)("ul",{parentName:"li"},(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("inlineCode",{parentName:"li"},"npm install terra-clinical-result"))))),(0,n.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),(0,n.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),(0,n.mdx)("table",null,(0,n.mdx)("thead",{parentName:"table"},(0,n.mdx)("tr",{parentName:"thead"},(0,n.mdx)("th",{parentName:"tr",align:null},"Peer Dependency"),(0,n.mdx)("th",{parentName:"tr",align:null},"Version"))),(0,n.mdx)("tbody",{parentName:"table"},(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"react"),(0,n.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"react-dom"),(0,n.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,n.mdx)("tr",{parentName:"tbody"},(0,n.mdx)("td",{parentName:"tr",align:null},"react-intl"),(0,n.mdx)("td",{parentName:"tr",align:null},"^2.8.0")))),(0,n.mdx)("h2",{id:"usage"},"Usage"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-jsx"},"import { ResultNameHeaderCell } from 'terra-clinical-result/lib/index';\n")),(0,n.mdx)("h2",{id:"examples"},"Examples"),(0,n.mdx)(f,{mdxType:"Default"}),(0,n.mdx)(w,{title:"Result Name Header Cells in Sample Flowsheet",mdxType:"FlowsheetExample"}),(0,n.mdx)("h2",{id:"result-name-header-cell-props"},"Result Name Header Cell Props"),(0,n.mdx)(j,{mdxType:"ResultNameHeaderProps"}))}X.isMDXComponent=!0},18922:function(e,t,l){t.Z=void 0;var a,n=(a=l(67294))&&a.__esModule?a:{default:a},r=l(33671);t.Z=function(){return n.default.createElement(r.ResultNameHeaderCell,{resultName:"Blood Pressure",unit:"mmHg"})}},17093:function(e,t,l){t.Z=void 0;var a=o(l(67294)),n=l(33671),r=o(l(94184)),m=o(l(47166)),s=o(l(50026)),d=o(l(62547));function o(e){return e&&e.__esModule?e:{default:e}}var i=m.default.bind(d.default),u=function(){var e=a.default.useContext(s.default),t=(0,r.default)(i("mock-flowsheet-example",e.className));return a.default.createElement("div",{className:t},a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn")},a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn-cell")},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Temp",unit:"degC"})),a.default.createElement("div",{className:i(["mock-flowsheet-firstcolumn-cell","zebra"])},a.default.createElement(n.ResultNameHeaderCell,{resultName:"HR",unit:"bpm"})),a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn-cell")},a.default.createElement(n.ResultNameHeaderCell,{resultName:"BP",unit:"mmHg"})),a.default.createElement("div",{className:i(["mock-flowsheet-firstcolumn-cell","zebra"])},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Mean Arterial Pressure, Cuff",unit:"mmHg",typeIndicator:"calculated"})),a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn-cell")},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Respiratory Rate",unit:"br/min"})),a.default.createElement("div",{className:i(["mock-flowsheet-firstcolumn-cell","zebra"])},a.default.createElement(n.ResultNameHeaderCell,{resultName:"SpO2",unit:"%"})),a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn-cell")},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Height/Length Dosing",unit:"cm"})),a.default.createElement("div",{className:i(["mock-flowsheet-firstcolumn-cell","zebra"])},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Height/Length Measured",unit:"cm"})),a.default.createElement("div",{className:i("mock-flowsheet-firstcolumn-cell")},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Weight Dosing",unit:"kg"})),a.default.createElement("div",{className:i(["mock-flowsheet-firstcolumn-cell","zebra"])},a.default.createElement(n.ResultNameHeaderCell,{resultName:"Weight Measured",unit:"kg"}))))};t.Z=u}}]);