"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[825],{13099:function(e,t,n){function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}t.Z=void 0;var r=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var n=c(t);if(n&&n.has(e))return n.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var s=o?Object.getOwnPropertyDescriptor(e,l):null;s&&(s.get||s.set)?Object.defineProperty(r,l,s):r[l]=e[l]}r.default=e,n&&n.set(e,r);return r}(n(67294)),o=s(n(7270)),l=s(n(78769));function s(e){return e&&e.__esModule?e:{default:e}}function c(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(c=function(e){return e?n:t})(e)}function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o,l,s=[],c=!0,i=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(a=o.call(n)).done)&&(s.push(a.value),s.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{if(!c&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(i)throw r}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},m.apply(this,arguments)}var d=["column-0","column-1","column-2"],p=function(){var e,t,n=i((0,r.useState)({key:d[0],sortDesc:!1}),2),a=n[0],s=n[1],c=function(e,t){e.preventDefault(),a.key!==t.key?s({key:t.key,sortDesc:!1}):s({key:t.key,sortDesc:!a.sortDesc})},u=function(e,t){return{key:e,id:"header-".concat(e),metaData:{key:e},onSortAction:c,isSortDesc:a.key===e&&a.sortDesc,isSortActive:a.key===e,children:t}};return r.default.createElement(o.default,{summaryId:"example-sorted-table",summary:"This table shows an implementation of sorted table.",numberOfColumns:3,cellPaddingStyle:"standard",headerData:{cells:[u(d[0],"Breakfast"),u(d[1],"Animals"),u(d[2],"Flatware")]},bodyData:[{rows:(e=l.default,t=function(e,t){if(!t)return e;var n=m([],e);return n.sort((function(e,n){var a=e.cells[d.indexOf(t.key)].title.toLowerCase(),r=n.cells[d.indexOf(t.key)].title.toLowerCase();return a<r?-1:a>r?1:0})),t.sortDesc?n.reverse():n}(e,a),t.map((function(e){return{key:(t=e).key,cells:(n=t.cells,n.map((function(e){return function(e){return{key:e.key,children:e.title}}(e)})))};var t,n})))}]})};t.Z=p},78769:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=[{key:"unique-0",cells:[{key:"unique-0-0",title:"Pancakes"},{key:"unique-0-1",title:"Dogs"},{key:"unique-0-2",title:"Forks"}]},{key:"unique-1",cells:[{key:"unique-1-0",title:"Bacon"},{key:"unique-1-1",title:"Mice"},{key:"unique-1-2",title:"Knives"}]},{key:"unique-2",cells:[{key:"unique-2-0",title:"Waffles"},{key:"unique-2-1",title:"Cats"},{key:"unique-2-2",title:"Chopsticks"}]},{key:"unique-3",cells:[{key:"unique-3-0",title:"Fruit"},{key:"unique-3-1",title:"Sheep"},{key:"unique-3-2",title:"Spoons"}]},{key:"unique-4",cells:[{key:"unique-4-0",title:"Eggs"},{key:"unique-4-1",title:"Pigs"},{key:"unique-4-2",title:"Sporks"}]}];t.default=n},825:function(e,t,n){n.r(t),n.d(t,{default:function(){return g}});var a=n(67294),r=n(81254),o=n(13099),l=["components"];function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},s.apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i={},u="wrapper";function m(e){var t=e.components,n=c(e,l);return(0,r.mdx)(u,s({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, {\n  useState,\n} from 'react';\nimport Table from 'terra-table';\nimport mockData from './mock-data/mock-sort';\n\nconst columnKeys = ['column-0', 'column-1', 'column-2'];\n\nconst createCell = cell => ({ key: cell.key, children: cell.title });\n\nconst createCellsForRow = cells => cells.map(cell => createCell(cell));\n\nconst createRow = rowData => ({ key: rowData.key, cells: createCellsForRow(rowData.cells) });\n\nconst sortData = (data, sortColumn) => {\n  if (!sortColumn) {\n    return data;\n  }\n\n  const dataCopy = Object.assign([], data);\n  dataCopy.sort((a, b) => {\n    const x = a.cells[columnKeys.indexOf(sortColumn.key)].title.toLowerCase();\n    const y = b.cells[columnKeys.indexOf(sortColumn.key)].title.toLowerCase();\n    if (x < y) { return -1; }\n    if (x > y) { return 1; }\n    return 0;\n  });\n\n  return sortColumn.sortDesc ? dataCopy.reverse() : dataCopy;\n};\n\nconst SortedTable = () => {\n  const [sortColumn, setSortColumn] = useState({ key: columnKeys[0], sortDesc: false });\n\n  const handleSortClick = (event, metaData) => {\n    event.preventDefault();\n    if (sortColumn.key !== metaData.key) {\n      setSortColumn({ key: metaData.key, sortDesc: false });\n    } else {\n      setSortColumn({ key: metaData.key, sortDesc: !sortColumn.sortDesc });\n    }\n  };\n\n  const createRows = (data) => {\n    const sortedData = sortData(data, sortColumn);\n    return sortedData.map(childItem => createRow(childItem));\n  };\n\n  const createHeaderCell = (key, title) => (\n    {\n      key,\n      id: `header-${key}`,\n      metaData: { key },\n      onSortAction: handleSortClick,\n      isSortDesc: sortColumn.key === key ? sortColumn.sortDesc : false,\n      isSortActive: sortColumn.key === key,\n      children: title,\n    }\n  );\n\n  return (\n    <Table\n      summaryId=\"example-sorted-table\"\n      summary=\"This table shows an implementation of sorted table.\"\n      numberOfColumns={3}\n      cellPaddingStyle=\"standard\"\n      headerData={{\n        cells: [\n          createHeaderCell(columnKeys[0], 'Breakfast'),\n          createHeaderCell(columnKeys[1], 'Animals'),\n          createHeaderCell(columnKeys[2], 'Flatware'),\n        ],\n      }}\n      bodyData={[{\n        rows: createRows(mockData),\n      }]}\n    />\n  );\n};\n\nexport default SortedTable;\n\n")))}m.isMDXComponent=!0;var d=n(49271),p=function(e){var t=e.title,n=e.description,r=e.isExpanded;return a.createElement(d.Z,{title:t||"Sorted Table",description:n,example:a.createElement(o.Z,null),exampleSrc:a.createElement(m,null),isExpanded:r})},y=["components"];function f(){return f=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},f.apply(this,arguments)}function h(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var k={},b="wrapper";function g(e){var t=e.components,n=h(e,y);return(0,r.mdx)(b,f({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"terra-table---implementing-a-sorted-table"},"Terra Table - Implementing a Sorted Table"),(0,r.mdx)("p",null,"As table cell content is dynamic and the types of sorting can vary, consumers need to handle the state of their own sorting. The following guide lays out an example of managing sorting and state within a table implementation. There are further optimizations that can be made given an individual implementation of a data set, but this should serve as a framework for that."),(0,r.mdx)("h2",{id:"state-management"},"State Management"),(0,r.mdx)("p",null,"The state of the sort column needs to be managed for the table in a HOC. In this example we are going to be an object containing a unique key for the column and current sort direction."),(0,r.mdx)("p",null," First defaulting our state to sorting the first column."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const [sortColumn, setSortColumn] = useState({ key: columnKeys[0], sortDesc: false });\n")),(0,r.mdx)("p",null,"Next creating an event handler callback method to pass to the table row's ",(0,r.mdx)("inlineCode",{parentName:"p"},"onSelect")," prop. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"onSelect")," will return the metaData prop passed it each header cell."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+  const handleSortClick = (event, metaData) => {\n\n+  }\n")),(0,r.mdx)("p",null,"As a precaution we can prevent default on the event, in case the table has an ancestor with a listener. This also prevents the browser from auto page scrolling when we are intending to make a selection with the space bar."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"  const handleSortClick = (event, metaData) => {\n+   event.preventDefault();\n  }\n")),(0,r.mdx)("p",null,"In this example only one column will be sorted upon, so we'll need to keep track of which column was selected and the current state of sorting for the column. 3 states of column state will be handled, unsorted, sort ascending, and sort descending. A key was sent with the metaData, but an index could have also been used in an implementation where there is no possibility of the columns being rearranged."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"  const handleSortClick = (event, metaData) => {\n    event.preventDefault();\n+   if (sortColumn.key !== metaData.key) {\n+     setSortColumn({ key: metaData.key, sortDesc: false });\n+   } else {\n+     setSortColumn({ key: metaData.key, sortDesc: !sortColumn.sortDesc });\n+   }\n  };\n")),(0,r.mdx)("p",null,"Settting state will trigger another render. So in the render method we need generate our head cells with the updated sort props. Each header cell while need a unique key."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const createHeaderCell = (key, title) => (\n+   {\n+     key,\n+     id: `header-${key}`,\n+     children: title,\n+   }\n+ );\n")),(0,r.mdx)("p",null,"Next we need to set up our metaData object with our key value, and attach the ",(0,r.mdx)("inlineCode",{parentName:"p"},"onSortAction")," to our handler."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"  const createHeaderCell = (key, title) => (\n    {\n      key,\n      id: `header-${key}`,\n+     metaData: { key },\n+     onSortAction: handleSortClick,\n      children: title,\n    }\n  );\n")),(0,r.mdx)("p",null,"Last we need to check if the header cell matches the sortColumn.key in state. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"isSortActive")," prop dictates the visual presence of sorting."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"  const createHeaderCell = (key, title) => (\n    {\n      key,\n      id: `header-${key}`,\n      metaData: { key },\n      onSortAction: handleSortClick,\n+     isSortDesc: sortColumn.key === key ? sortColumn.sortDesc : false,\n+     isSortActive: sortColumn.key === key,\n      children: title,\n    }\n  );\n")),(0,r.mdx)("p",null,"In this example a simple object sort parses the data, followed by a check for reversal."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const sortData = (data, sortColumn) => {\n+   if (!sortColumn) {\n+     return data;\n+   }\n+\n+   const dataCopy = Object.assign([], data);\n+   dataCopy.sort((a, b) => {\n+    const x = a.cells[columns.indexOf(sortColumn.key)].title.toLowerCase();\n+    const y = b.cells[columns.indexOf(sortColumn.key)].title.toLowerCase();\n+    if (x < y) { return -1; }\n+    if (x > y) { return 1; }\n+      return 0;\n+    });\n\n+   return sortColumn.sortDesc ? dataCopy.reverse() : dataCopy;\n+ };\n")),(0,r.mdx)("p",null,"Next we fill in the static methods for the example table rows."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const columns = ['column-0', 'column-1', 'column-2'];\n\n+ const createCell = cell => ({ key: cell.key, children: cell.title });\n\n+ const createCellsForRow = cells => cells.map(cell => createCell(cell));\n\n+ const createRow = rowData => ({ key: rowData.key, cells: createCellsForRow(rowData.cells) });\n")),(0,r.mdx)("p",null,"Then we can implement a method to loop through our data and create the table rows with our methods and call it from our render method. "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-diff"},"+ const createRows = (data) => {\n+   const sortedData = sortData(data, sortColumn);\n+   return sortedData.map(childItem => createRow(childItem));\n+ };\n\n  return (\n+   <Table\n+     summaryId=\"example-sorted-table\"\n+     summary=\"This table shows an implementation of sorted table.\"\n+     numberOfColumns={3}\n+     cellPaddingStyle=\"standard\"\n+     headerData={{\n+       cells: [\n+         createHeaderCell(columnKeys[0], 'Breakfast'),\n+         createHeaderCell(columnKeys[1], 'Animals'),\n+         createHeaderCell(columnKeys[2], 'Flatware'),\n+       ],\n+     }}\n+     bodyData={[{\n+       rows: createRows(mockData),\n+     }]}\n+   />\n  );\n")),(0,r.mdx)("p",null,"Using these steps we get the following example:"),(0,r.mdx)(p,{mdxType:"SortedTable"}))}g.isMDXComponent=!0}}]);