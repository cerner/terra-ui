"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[20084],{20084:function(e,t,l){l.r(t),l.d(t,{default:function(){return Ae}});var n=l(67294),s=l(81254),a=l(26372),r=l(81689),o=["components"];function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},i.apply(this,arguments)}function m(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var c={},u="wrapper";function d(e){var t=e.components,l=m(e,o);return(0,s.mdx)(u,i({},c,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\n\nconst singleResultValue = [\n  {\n    eventId: '111',\n    result: {\n      value: '12345.678',\n      unit: 'mL',\n    },\n    isModified: true,\n    hasComment: true,\n  },\n];\n\nexport default () => <FlowsheetResultCell resultDataSet={singleResultValue} />;\n\n")))}d.isMDXComponent=!0;var p=l(49271),f=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Default",description:l,example:n.createElement(r.Z,null),exampleSrc:n.createElement(d,null),isExpanded:s})},h=l(63860),v=["components"];function x(){return x=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},x.apply(this,arguments)}function w(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var y={},N="wrapper";function g(e){var t=e.components,l=w(e,v);return(0,s.mdx)(N,x({},y,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst multipleResultValues = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: true,\n    hasComment: true,\n  },\n  {\n    eventId: '1602328282',\n    result: {\n      value: '101.2',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n  {\n    eventId: '1602328293',\n    result: {\n      value: '101.3',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n    </div>\n  );\n};\n\n")))}g.isMDXComponent=!0;var C=l(98568),b=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Multiple Results",description:l,example:n.createElement(h.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(g,null),isExpanded:s})},E=l(70868),k=["components"];function R(){return R=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},R.apply(this,arguments)}function O(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var S={},D="wrapper";function j(e){var t=e.components,l=O(e,k);return(0,s.mdx)(D,R({},S,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst bloodpressureResultValue = [\n  {\n    id: '111',\n    systolic: {\n      eventId: '111.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n    },\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={bloodpressureResultValue} hideUnit />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n    </div>\n  );\n};\n\n")))}j.isMDXComponent=!0;var F=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Blood Pressure",description:l,example:n.createElement(E.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(j,null),isExpanded:s})},T=l(30007),I=["components"];function P(){return P=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},P.apply(this,arguments)}function M(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var U={},Z="wrapper";function H(e){var t=e.components,l=M(e,I);return(0,s.mdx)(Z,P({},U,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst multipleResultBPValues = [\n  {\n    id: '1602328271-1',\n    systolic: {\n      eventId: '1602328271-1.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-1.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-2',\n    systolic: {\n      eventId: '1602328271-2.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-2.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-3',\n    systolic: {\n      eventId: '1602328271-3.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-3.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n    </div>\n  );\n};\n\n")))}H.isMDXComponent=!0;var V=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Multiple Blood Pressures",description:l,example:n.createElement(T.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(H,null),isExpanded:s})},B=l(37128),X=["components"];function _(){return _=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},_.apply(this,arguments)}function W(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var L={},q="wrapper";function A(e){var t=e.components,l=W(e,X);return(0,s.mdx)(q,_({},L,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst unverifiedResultValue = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    interpretation: 'critical',\n    isUnverified: true,\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'empty'])} />\n      </div>\n    </div>\n  );\n};\n\n")))}A.isMDXComponent=!0;var K=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Unverified Results",description:l,example:n.createElement(B.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(A,null),isExpanded:s})},G=l(5198),z=["components"];function J(){return J=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},J.apply(this,arguments)}function Q(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var Y={},$="wrapper";function ee(e){var t=e.components,l=Q(e,z);return(0,s.mdx)($,J({},Y,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst multipleResultBPValues = [\n  {\n    id: '1602328271-1',\n    systolic: {\n      eventId: '1602328271-1.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-1.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-2',\n    systolic: {\n      eventId: '1602328271-2.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-2.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'low',\n      isModified: true,\n      hasComment: true,\n    },\n  },\n  {\n    id: '1602328271-3',\n    systolic: {\n      eventId: '1602328271-3.1',\n      result: {\n        value: '111',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n    diastolic: {\n      eventId: '1602328271-3.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      isModified: true,\n      hasComment: true,\n    },\n  },\n];\n\nconst unverifiedResultValue = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.1',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isUnverified: true,\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n          none\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding'])}>\n          compact\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding', 'medium'])}>\n          standard\n        </div>\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n          <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"none\" />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"compact\" />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'medium'])}>\n          <FlowsheetResultCell resultDataSet={multipleResultBPValues} hideUnit paddingStyle=\"standard\" />\n        </div>\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'short'])}>\n          <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"none\" />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"compact\" />\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'medium'])}>\n          <FlowsheetResultCell resultDataSet={unverifiedResultValue} hideUnit paddingStyle=\"standard\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n")))}ee.isMDXComponent=!0;var te=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Padding Style",description:l,example:n.createElement(G.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(ee,null),isExpanded:s})},le=l(42374),ne=["components"];function se(){return se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},se.apply(this,arguments)}function ae(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var re={},oe="wrapper";function ie(e){var t=e.components,l=ae(e,ne);return(0,s.mdx)(oe,se({},re,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst partialResultValueWithNoDataPropSystolic = [\n  {\n    id: '111',\n    systolic: {\n      eventId: '111.1',\n      resultNoData: true,\n    },\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n  },\n];\n\nconst partialResultValueWithNoDataPropDiastolic = [\n  {\n    id: '222',\n    systolic: {\n      eventId: '222.1',\n      result: {\n        value: '140',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n    },\n    diastolic: {\n      eventId: '222.2',\n      resultNoData: true,\n    },\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      {/* This example column shows a standard result with the `hasResultNoData` prop or `result: { value: null, }` */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell hasResultNoData />\n        </div>\n      </div>\n      {/* This example column shows a partial Blood Pressure no data display using the `resultNoData` property name */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={partialResultValueWithNoDataPropSystolic} hideUnit />\n        </div>\n      </div>\n      {/* This example column shows a partial Blood Pressure no data display using `result: { value: null, }` */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={partialResultValueWithNoDataPropDiastolic} hideUnit />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n")))}ie.isMDXComponent=!0;var me=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Known And Partial No Data",description:l,example:n.createElement(le.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(ie,null),isExpanded:s})},ce=l(94908),ue=["components"];function de(){return de=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},de.apply(this,arguments)}function pe(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var fe={},he="wrapper";function ve(e){var t=e.components,l=pe(e,ue);return(0,s.mdx)(he,de({},fe,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst partialResultValueWithNoSystolic = [\n  {\n    id: '111',\n    diastolic: {\n      eventId: '111.2',\n      result: {\n        value: '77',\n        unit: 'mmHg',\n      },\n      interpretation: 'critical',\n    },\n  },\n];\n\nconst partialResultValueWithNoDiastolic = [\n  {\n    id: '222',\n    systolic: {\n      eventId: '222.1',\n      result: {\n        value: '140',\n        unit: 'mmHg',\n      },\n      interpretation: 'high',\n    },\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      {/* This example column shows how to use the `hasResultError` prop */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell hasResultError />\n        </div>\n      </div>\n      {/* This example column shows the error display when the Systolic property name is not present */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={partialResultValueWithNoSystolic} hideUnit />\n        </div>\n      </div>\n      {/* This example column shows the error display when the Diastolic property name is not present */}\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={partialResultValueWithNoDiastolic} hideUnit />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n")))}ve.isMDXComponent=!0;var xe=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Known Error And Partial Error",description:l,example:n.createElement(ce.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(ve,null),isExpanded:s})},we=l(2922),ye=["components"];function Ne(){return Ne=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},Ne.apply(this,arguments)}function ge(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var Ce={},be="wrapper";function Ee(e){var t=e.components,l=ge(e,ye);return(0,s.mdx)(be,Ne({},Ce,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst multipleResultValues = [\n  {\n    eventId: '1602328271',\n    result: {\n      value: '101.123456789123456789123456789123456789123456789',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: true,\n    hasComment: true,\n  },\n  {\n    eventId: '1602328282',\n    result: {\n      value: '101.2',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n  {\n    eventId: '1602328293',\n    result: {\n      value: '101.3',\n      unit: 'degC',\n    },\n    isNumeric: true,\n    isModified: false,\n    hasComment: false,\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn', 'half-column'])}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n      </div>\n      <div className={cx(['mock-flowsheet-resultcolumn', 'triple-column'])}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={multipleResultValues} hideUnit />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n")))}Ee.isMDXComponent=!0;var ke=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Numeric Overflow",description:l,example:n.createElement(we.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(Ee,null),isExpanded:s})},Re=l(51547),Oe=["components"];function Se(){return Se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},Se.apply(this,arguments)}function De(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var je={},Fe="wrapper";function Te(e){var t=e.components,l=De(e,Oe);return(0,s.mdx)(Fe,Se({},je,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\nimport classNames from 'classnames';\nimport classNamesBind from 'classnames/bind';\nimport ThemeContext from 'terra-theme-context';\nimport styles from '../Examples.module.scss';\n\nconst cx = classNamesBind.bind(styles);\n\nconst partialStandard = {\n  result: {\n    value: '12345.678',\n    unit: 'mL',\n  },\n};\n\nconst partialSystolic = {\n  eventId: '1602328271.1',\n  result: {\n    value: '120',\n    unit: 'mmHg',\n  },\n};\n\nconst partialDiastolic = {\n  eventId: '1602328271.2',\n  result: {\n    value: '80',\n    unit: 'mmHg',\n  },\n};\n\nconst standardInError = [\n  {\n    eventId: '1577836800',\n    ...partialStandard,\n    status: 'entered-in-error',\n  },\n  {\n    eventId: '1577836911',\n    ...partialStandard,\n  },\n];\n\nconst bloodpressureOneInError = [\n  {\n    id: '111',\n    systolic: {\n      ...partialSystolic,\n      status: 'entered-in-error',\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n  {\n    id: '112',\n    systolic: {\n      ...partialSystolic,\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n];\n\nconst bloodpressureBothInError = [\n  {\n    id: '211',\n    systolic: {\n      ...partialSystolic,\n      status: 'entered-in-error',\n    },\n    diastolic: {\n      ...partialDiastolic,\n      status: 'entered-in-error',\n    },\n  },\n  {\n    id: '212',\n    systolic: {\n      ...partialSystolic,\n    },\n    diastolic: {\n      ...partialDiastolic,\n    },\n  },\n];\n\nexport default () => {\n  const theme = React.useContext(ThemeContext);\n  const mockFlowsheetClassnames = classNames(\n    cx(\n      'mock-flowsheet-example',\n      theme.className,\n    ),\n  );\n\n  return (\n    <div className={mockFlowsheetClassnames}>\n      <div className={cx(['mock-flowsheet-resultcolumn', 'double-column'])}>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'with-padding'])}>\n          standard result\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'wide', 'with-padding'])}>\n          blood pressure: systolic-only\n        </div>\n        <div className={cx(['mock-flowsheet-resultcolumn-cell', 'wide', 'with-padding'])}>\n          blood pressure: both systolic & diastolic\n        </div>\n      </div>\n      <div className={cx('mock-flowsheet-resultcolumn')}>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={standardInError} hideUnit />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={bloodpressureOneInError} hideUnit />\n        </div>\n        <div className={cx('mock-flowsheet-resultcolumn-cell')}>\n          <FlowsheetResultCell resultDataSet={bloodpressureBothInError} hideUnit />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n")))}Te.isMDXComponent=!0;var Ie=function(e){var t=e.title,l=e.description,s=e.isExpanded;return n.createElement(p.Z,{title:t||"Flowsheet Result Cell Status Entered In Error",description:l,example:n.createElement(Re.Z,null),exampleCssSrc:n.createElement(C.Z,null),exampleSrc:n.createElement(Te,null),isExpanded:s})},Pe=l(78530),Me=["components"];function Ue(){return Ue=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},Ue.apply(this,arguments)}function Ze(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var He={},Ve="wrapper";function Be(e){var t=e.components,l=Ze(e,Me);return(0,s.mdx)(Ve,Ue({},He,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)(Pe.ZP,{mdxType:"PropsTable"},(0,s.mdx)(Pe.X2,{key:"ROW1",mdxType:"Row"},(0,s.mdx)(Pe.O,{mdxType:"PropNameCell"},"resultDataSet"),(0,s.mdx)(Pe.Di,{mdxType:"TypeCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"arrayOf: [{\n  shape: {\n    id: {\n      type: 'string',\n      description: 'A single clinical result or blood pressure result id.',\n    },\n    resultData: {\n      type: 'custom',\n      description: 'A single clinical result or blood pressure result.',\n    },\n  },\n}],\n"))),(0,s.mdx)(Pe.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,s.mdx)(Pe.mW,{mdxType:"DefaultValueCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"[]\n"))),(0,s.mdx)(Pe.Ex,{mdxType:"DescriptionCell"},(0,s.mdx)("p",null,"A set of clinical results. Example object structure listed above.                                              ."))),(0,s.mdx)(Pe.X2,{key:"ROW2",mdxType:"Row"},(0,s.mdx)(Pe.O,{mdxType:"PropNameCell"},"hideUnit"),(0,s.mdx)(Pe.Di,{mdxType:"TypeCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"bool\n"))),(0,s.mdx)(Pe.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,s.mdx)(Pe.mW,{mdxType:"DefaultValueCell"},(0,s.mdx)("p",null,"none")),(0,s.mdx)(Pe.Ex,{mdxType:"DescriptionCell"},(0,s.mdx)("p",null,"Visually hides the unit of measure when presented in a series of side-by-side columns of the same unit."))),(0,s.mdx)(Pe.X2,{key:"ROW3",mdxType:"Row"},(0,s.mdx)(Pe.O,{mdxType:"PropNameCell"},"paddingStyle"),(0,s.mdx)(Pe.Di,{mdxType:"TypeCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"enum: [\n  'none'\n  'standard'\n  'compact'\n],\n"))),(0,s.mdx)(Pe.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,s.mdx)(Pe.mW,{mdxType:"DefaultValueCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"'compact'\n"))),(0,s.mdx)(Pe.Ex,{mdxType:"DescriptionCell"},(0,s.mdx)("p",null,"The padding styling to apply to the Time Column Header Cell.\nOne of ",(0,s.mdx)("inlineCode",{parentName:"p"},"'none'"),", ",(0,s.mdx)("inlineCode",{parentName:"p"},"'standard'"),", ",(0,s.mdx)("inlineCode",{parentName:"p"},"'compact'"),"."))),(0,s.mdx)(Pe.X2,{key:"ROW4",mdxType:"Row"},(0,s.mdx)(Pe.O,{mdxType:"PropNameCell"},"hasResultError"),(0,s.mdx)(Pe.Di,{mdxType:"TypeCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"bool\n"))),(0,s.mdx)(Pe.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,s.mdx)(Pe.mW,{mdxType:"DefaultValueCell"},(0,s.mdx)("p",null,"none")),(0,s.mdx)(Pe.Ex,{mdxType:"DescriptionCell"},(0,s.mdx)("p",null,"Override that shows an Error display. Used when there is a known error or problem when retrieving or assembling the clinical result data."))),(0,s.mdx)(Pe.X2,{key:"ROW5",mdxType:"Row"},(0,s.mdx)(Pe.O,{mdxType:"PropNameCell"},"hasResultNoData"),(0,s.mdx)(Pe.Di,{mdxType:"TypeCell"},(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"bool\n"))),(0,s.mdx)(Pe.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,s.mdx)(Pe.mW,{mdxType:"DefaultValueCell"},(0,s.mdx)("p",null,"none")),(0,s.mdx)(Pe.Ex,{mdxType:"DescriptionCell"},(0,s.mdx)("p",null,'Override that shows a known "No Data" display. Used when there is known to be no value for a given clinical result concept at a specific datetime.')))))}Be.isMDXComponent=!0;var Xe=["components"];function _e(){return _e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n])}return e},_e.apply(this,arguments)}function We(e,t){if(null==e)return{};var l,n,s=function(e,t){if(null==e)return{};var l,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(s[l]=e[l]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(s[l]=e[l])}return s}var Le={},qe="wrapper";function Ae(e){var t=e.components,l=We(e,Xe);return(0,s.mdx)(qe,_e({},Le,l,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)(a.C,{mdxType:"Badge"}),(0,s.mdx)("h1",{id:"terra-clinical-flowsheet-result-cell"},"Terra Clinical Flowsheet Result Cell"),(0,s.mdx)("p",null,"The Clinical Result is a standardized view for single result values added to a Patient's Medical Chart. The flowsheet result cell is specifically for the grid display of a result collection, and can handle displaying an indication of multiple results."),(0,s.mdx)("h2",{id:"getting-started"},"Getting Started"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"Install with ",(0,s.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npmjs"),":",(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"npm install terra-clinical-result"))))),(0,s.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),(0,s.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),(0,s.mdx)("table",null,(0,s.mdx)("thead",{parentName:"table"},(0,s.mdx)("tr",{parentName:"thead"},(0,s.mdx)("th",{parentName:"tr",align:null},"Peer Dependency"),(0,s.mdx)("th",{parentName:"tr",align:null},"Version"))),(0,s.mdx)("tbody",{parentName:"table"},(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},"react"),(0,s.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},"react-dom"),(0,s.mdx)("td",{parentName:"tr",align:null},"^16.8.5")),(0,s.mdx)("tr",{parentName:"tbody"},(0,s.mdx)("td",{parentName:"tr",align:null},"react-intl"),(0,s.mdx)("td",{parentName:"tr",align:null},"^2.8.0")))),(0,s.mdx)("h2",{id:"usage-guide"},"Usage Guide"),(0,s.mdx)("p",null,"The flowsheet cell for clinical results is constructed by providing the same structured object as the clinical result in an array, allowing for multiple results to be indicated in the same time cell."),(0,s.mdx)("p",null,"Currently the Flowsheet expects an array of one or more results - and if there are multiple, it will display the first in the array, with an indication of additional results. Updates are in progress to also look at the performedDateTime value if provided to evaluate which result is the most recent to appropriately display, regardless of which order index position in the array it is."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-jsx"},"import { FlowsheetResultCell } from 'terra-clinical-result/lib/index';\n")),(0,s.mdx)("h2",{id:"component-features"},"Component Features"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#cross-browser-support"},"Cross-Browser Support")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#responsive-support"},"Responsive Support")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#mobile-support"},"Mobile Support")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("a",{parentName:"li",href:"https://engineering.cerner.com/terra-ui/about/terra-ui/component-standards#ltr--rtl"},"LTR/RTL Support"))),(0,s.mdx)("h2",{id:"examples"},"Examples"),(0,s.mdx)(f,{title:"Flowsheet Result Cell",mdxType:"DefaultCell"}),(0,s.mdx)(b,{title:"Flowsheet Result Cell with Multiple Results",mdxType:"MultipleResultsCell"}),(0,s.mdx)(F,{title:"Flowsheet Result Cell with Blood Pressure Result",mdxType:"BloodPressureCell"}),(0,s.mdx)(V,{title:"Flowsheet Result Cell with Multiple Blood Pressure Results",mdxType:"MultipleBloodPressuresCell"}),(0,s.mdx)(K,{title:"Flowsheet Result Cell with Unverified Results",mdxType:"UnverifiedResultsCell"}),(0,s.mdx)(te,{title:"Flowsheet Result Cell Padding Styles",mdxType:"PaddingStyleCell"}),(0,s.mdx)(me,{title:"Flowsheet Result Cell for 'Known No Result' and Blood Pressure partial 'No Result'",description:"Use the 'hasResultNoData' prop to show the 'No Data' display for the Flowsheet Result Cell. For Blood Pressure, Use either the 'resultNoData' property name or ' result: { value: null, }' to show the 'No Data' display for either the Systolic or Diastolic result:",mdxType:"KnownAndPartialNoData"}),(0,s.mdx)(xe,{title:"Displays for a full 'Known Error' and for partial missing results",description:"Use the 'hasResultError' prop to show the 'Error' display for the full Flowsheet Result Cell. Or if there is a missing part results (e.g. Systolic or Diastolic), that portion will show the error display:",mdxType:"KnownErrorAndPartialError"}),(0,s.mdx)(ke,{title:"Flowsheet Result Cell with a numeric result that overflows the container",description:"When displaying a result with an overflowed numeric value, instead of truncating the value, shows 'View Results' message.",mdxType:"NumericOverflow"}),(0,s.mdx)(Ie,{title:"Uncharted Result as 'Entered In Error'",description:"Display for when the result status has been set to 'entered-in-error'",mdxType:"StatusEnteredInError"}),(0,s.mdx)("h2",{id:"flowsheet-result-cell-props"},"Flowsheet Result Cell Props"),(0,s.mdx)(Be,{mdxType:"FlowsheetResultCellProps"}))}Ae.isMDXComponent=!0},70868:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{id:"111",systolic:{eventId:"111.1",result:{value:"111",unit:"mmHg"},interpretation:"critical"},diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"}}}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})))}},81689:function(e,t,l){t.Z=void 0;var n,s=(n=l(67294))&&n.__esModule?n:{default:n},a=l(33671);var r=[{eventId:"111",result:{value:"12345.678",unit:"mL"},isModified:!0,hasComment:!0}];t.Z=function(){return s.default.createElement(a.FlowsheetResultCell,{resultDataSet:r})}},42374:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{id:"111",systolic:{eventId:"111.1",resultNoData:!0},diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"},interpretation:"critical"}}],d=[{id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"},diastolic:{eventId:"222.2",resultNoData:!0}}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{hasResultNoData:!0}))),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:d,hideUnit:!0}))))}},94908:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{id:"111",diastolic:{eventId:"111.2",result:{value:"77",unit:"mmHg"},interpretation:"critical"}}],d=[{id:"222",systolic:{eventId:"222.1",result:{value:"140",unit:"mmHg"},interpretation:"high"}}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{hasResultError:!0}))),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:d,hideUnit:!0}))))}},30007:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{id:"1602328271-1",systolic:{eventId:"1602328271-1.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-1.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-2",systolic:{eventId:"1602328271-2.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-2.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-3",systolic:{eventId:"1602328271-3.1",result:{value:"111",unit:"mmHg"},isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-3.2",result:{value:"77",unit:"mmHg"},isModified:!0,hasComment:!0}}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})))}},63860:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},isNumeric:!0,isModified:!0,hasComment:!0},{eventId:"1602328282",result:{value:"101.2",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1},{eventId:"1602328293",result:{value:"101.3",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})))}},2922:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{eventId:"1602328271",result:{value:"101.123456789123456789123456789123456789123456789",unit:"degC"},isNumeric:!0,isModified:!0,hasComment:!0},{eventId:"1602328282",result:{value:"101.2",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1},{eventId:"1602328293",result:{value:"101.3",unit:"degC"},isNumeric:!0,isModified:!1,hasComment:!1}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn","half-column"])},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn","triple-column"])},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0}))))}},5198:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{id:"1602328271-1",systolic:{eventId:"1602328271-1.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-1.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-2",systolic:{eventId:"1602328271-2.1",result:{value:"111",unit:"mmHg"},interpretation:"high",isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-2.2",result:{value:"77",unit:"mmHg"},interpretation:"low",isModified:!0,hasComment:!0}},{id:"1602328271-3",systolic:{eventId:"1602328271-3.1",result:{value:"111",unit:"mmHg"},isModified:!0,hasComment:!0},diastolic:{eventId:"1602328271-3.2",result:{value:"77",unit:"mmHg"},isModified:!0,hasComment:!0}}],d=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},isNumeric:!0,isUnverified:!0}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","short"])},"none"),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","with-padding"])},"compact"),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","with-padding","medium"])},"standard")),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","short"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"none"})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"compact"})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","medium"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0,paddingStyle:"standard"}))),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","short"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:d,hideUnit:!0,paddingStyle:"none"})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:d,hideUnit:!0,paddingStyle:"compact"})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","medium"])},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:d,hideUnit:!0,paddingStyle:"standard"}))))}},51547:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}function c(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function u(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?c(Object(l),!0).forEach((function(t){d(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):c(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function d(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}var p=r.default.bind(i.default),f={result:{value:"12345.678",unit:"mL"}},h={eventId:"1602328271.1",result:{value:"120",unit:"mmHg"}},v={eventId:"1602328271.2",result:{value:"80",unit:"mmHg"}},x=[u(u({eventId:"1577836800"},f),{},{status:"entered-in-error"}),u({eventId:"1577836911"},f)],w=[{id:"111",systolic:u(u({},h),{},{status:"entered-in-error"}),diastolic:u({},v)},{id:"112",systolic:u({},h),diastolic:u({},v)}],y=[{id:"211",systolic:u(u({},h),{},{status:"entered-in-error"}),diastolic:u(u({},v),{},{status:"entered-in-error"})},{id:"212",systolic:u({},h),diastolic:u({},v)}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(p("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:p(["mock-flowsheet-resultcolumn","double-column"])},n.default.createElement("div",{className:p(["mock-flowsheet-resultcolumn-cell","with-padding"])},"standard result"),n.default.createElement("div",{className:p(["mock-flowsheet-resultcolumn-cell","wide","with-padding"])},"blood pressure: systolic-only"),n.default.createElement("div",{className:p(["mock-flowsheet-resultcolumn-cell","wide","with-padding"])},"blood pressure: both systolic & diastolic")),n.default.createElement("div",{className:p("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:p("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:x,hideUnit:!0})),n.default.createElement("div",{className:p("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:w,hideUnit:!0})),n.default.createElement("div",{className:p("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:y,hideUnit:!0}))))}},37128:function(e,t,l){t.Z=void 0;var n=m(l(67294)),s=l(33671),a=m(l(94184)),r=m(l(47166)),o=m(l(50026)),i=m(l(62547));function m(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),u=[{eventId:"1602328271",result:{value:"101.1",unit:"degC"},interpretation:"critical",isUnverified:!0}];t.Z=function(){var e=n.default.useContext(o.default),t=(0,a.default)(c("mock-flowsheet-example",e.className));return n.default.createElement("div",{className:t},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn-cell")},n.default.createElement(s.FlowsheetResultCell,{resultDataSet:u,hideUnit:!0})),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})),n.default.createElement("div",{className:c("mock-flowsheet-resultcolumn")},n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])}),n.default.createElement("div",{className:c(["mock-flowsheet-resultcolumn-cell","empty"])})))}}}]);