"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[70679,78996,39915,33442],{3022:function(e,n,a){a.r(n),a.d(n,{default:function(){return f}});a(67294);var t=a(81254),r=a(78530),o=["components"];function i(){return i=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d={},s="wrapper";function p(e){var n=e.components,a=l(e,o);return(0,t.mdx)(s,i({},d,a,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)(r.ZP,{mdxType:"PropsTable"},(0,t.mdx)(r.X2,{key:"ROW1",mdxType:"Row"},(0,t.mdx)(r.O,{mdxType:"PropNameCell"},"children"),(0,t.mdx)(r.Di,{mdxType:"TypeCell"},(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-javascript"},"node\n"))),(0,t.mdx)(r.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,t.mdx)(r.mW,{mdxType:"DefaultValueCell"},(0,t.mdx)("p",null,"none")),(0,t.mdx)(r.Ex,{mdxType:"DescriptionCell"},(0,t.mdx)("p",null,"The components to be rendered in the body of the SlidePanelManager. These components will receive the\ndisclosure capabilities through the DisclosureManger's context API."))),(0,t.mdx)(r.X2,{key:"ROW2",mdxType:"Row"},(0,t.mdx)(r.O,{mdxType:"PropNameCell"},"panelBehavior"),(0,t.mdx)(r.Di,{mdxType:"TypeCell"},(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-javascript"},"enum: [\n  'overlay'\n  'squish'\n],\n"))),(0,t.mdx)(r.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,t.mdx)(r.mW,{mdxType:"DefaultValueCell"},(0,t.mdx)("p",null,"none")),(0,t.mdx)(r.Ex,{mdxType:"DescriptionCell"},(0,t.mdx)("p",null,"The desired panel behavior. Either 'squish' or 'overlay'."))),(0,t.mdx)(r.X2,{key:"ROW3",mdxType:"Row"},(0,t.mdx)(r.O,{mdxType:"PropNameCell"},"disclosureAccessory"),(0,t.mdx)(r.Di,{mdxType:"TypeCell"},(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-javascript"},"element\n"))),(0,t.mdx)(r.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,t.mdx)(r.mW,{mdxType:"DefaultValueCell"},(0,t.mdx)("p",null,"none")),(0,t.mdx)(r.Ex,{mdxType:"DescriptionCell"},(0,t.mdx)("p",null,"The component to render within the panel above the disclosed content."))),(0,t.mdx)(r.X2,{key:"ROW4",mdxType:"Row"},(0,t.mdx)(r.O,{mdxType:"PropNameCell"},"navigationPromptResolutionOptions"),(0,t.mdx)(r.Di,{mdxType:"TypeCell"},(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-javascript"},"custom\n"))),(0,t.mdx)(r.dS,{isRequired:!1,mdxType:"RequiredCell"}),(0,t.mdx)(r.mW,{mdxType:"DefaultValueCell"},(0,t.mdx)("p",null,"none")),(0,t.mdx)(r.Ex,{mdxType:"DescriptionCell"},(0,t.mdx)("p",null,"The Object (or function that returns an Object) that specifies the messages\nused to prompt the user when disclosure dismissal occurs when pending state\nis present. If not provided, the default messaging will be used.")))))}p.isMDXComponent=!0;var c=["components"];function m(){return m=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},m.apply(this,arguments)}function u(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var h,x=(h="Badge",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.mdx)("div",e)}),g={},y="wrapper";function f(e){var n=e.components,a=u(e,c);return(0,t.mdx)(y,m({},g,a,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)(x,{mdxType:"Badge"}),(0,t.mdx)("h1",{id:"slidepanelmanager"},"SlidePanelManager"),(0,t.mdx)("p",null,"The SlidePanelManager exposes its children to panel presentation APIs through the\n",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/contexts/disclosure-manager-context"},"DisclosureManagerContext"),"."),(0,t.mdx)("h2",{id:"usage"},"Usage"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-jsx"},"import SlidePanelManager from 'terra-application/lib/slide-panel-manager';\n")),(0,t.mdx)("h2",{id:"props"},"Props"),(0,t.mdx)(p,{mdxType:"PropsTable"}),(0,t.mdx)("h2",{id:"features"},"Features"),(0,t.mdx)("h3",{id:"exception-handling"},"Exception Handling"),(0,t.mdx)("p",null,"SlidePanelManager renders an ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/application-error-boundary"},"ApplicationErrorBoundary"),"\naround its disclosed components. If the disclosed components throw exceptions during React lifecycle functions, SlidePanelManager will\ncatch the exceptions and render a styled error component in place of the children."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"If the disclosed panel contents do not utilize the DisclosureManagerHeaderAdapter and render their own panel header instead,\nit is recommended that those components render an additional ApplicationErrorBoundary below their panel header to keep the\nheader controls for panel dismissal exposed.")),(0,t.mdx)("h3",{id:"loading-overlays"},"Loading Overlays"),(0,t.mdx)("p",null,"SlidePanelManager renders an ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/application-loading-overlay-provider"},"ApplicationLoadingOverlayProvider"),"\naround its disclosed components. Any ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/application-loading-overlay"},"ApplicationLoadingOverlay"),"\ncomponents rendered by children will cause a loading overlay to be rendered over the panel's contents."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"If the disclosed panel contents do not utilize the DisclosureManagerHeaderAdapter and render their own panel header instead,\nit is recommended that those components render an additional ApplicationLoadingOverlayProvider below their panel header to keep\nthe header controls for panel dismissal exposed while the overlay is active.")),(0,t.mdx)("h3",{id:"status-views"},"Status Views"),(0,t.mdx)("p",null,"SlidePanelManager renders an ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/application-status-overlay-provider"},"ApplicationStatusOverlayProvider"),"\naround its disclosed components. Any ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/application-status-overlay"},"ApplicationStatusOverlay"),"\ncomponents rendered by children will cause a status view to be rendered over the panel's contents."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"If the disclosed panel contents do not utilize the DisclosureManagerHeaderAdapter and render their own panel header instead,\nit is recommended that those components render an additional ApplicationStatusOverlayProvider below their panel header to keep\nthe header controls for panel dismissal exposed while the status view is active.")),(0,t.mdx)("h3",{id:"unsaved-changes"},"Unsaved Changes"),(0,t.mdx)("p",null,"SlidePanelManager monitors its disclosed content for the presence of rendered ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/navigation-prompt"},"NavigationPrompts"),"\nwithin its disclosed content. SlidePanelManager will ensure that the user is prompted prior to dismissing the presented panel if any\n",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/components/navigation-prompt"},"NavigationPrompts")," are rendered at the time of the dismissal request."),(0,t.mdx)("h2",{id:"details"},"Details"),(0,t.mdx)("h3",{id:"implementation-requirements"},"Implementation Requirements"),(0,t.mdx)("p",null,"The SlidePanelManager utilizes the ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/application/terra-application/contexts/disclosure-manager-context"},"DisclosureManagerContext")," to manage disclosure requests."),(0,t.mdx)("p",null,"The SlidePanelManager responds to ",(0,t.mdx)("inlineCode",{parentName:"p"},'"panel"')," disclosure type requests. Components that wish to disclose content using the SlidePanelManager\nshould provide a preferred type of ",(0,t.mdx)("inlineCode",{parentName:"p"},'"panel"'),"."),(0,t.mdx)("h3",{id:"disclosuremanagerheaderadapter-support"},"DisclosureManagerHeaderAdapter Support"),(0,t.mdx)("p",null,"If a component disclosed by the SlidePanelManager renders a ",(0,t.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter"),", the SlidePanelManager will render an ActionHeader\nand provide the standard disclosure navigation controls (close, go back, maximize/minimize, etc.) within it. The disclosed component\ncan use the ",(0,t.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter")," to inject its own title and CollapsibleButtonView into the ActionHeader."),(0,t.mdx)("p",null,"If the disclosed component does ",(0,t.mdx)("strong",{parentName:"p"},"not")," render a ",(0,t.mdx)("inlineCode",{parentName:"p"},"DisclosureManagerHeaderAdapter"),", the SlidePanelManager will ",(0,t.mdx)("strong",{parentName:"p"},"not")," render an ActionHeader itself.\nIn this case, it is assumed that the disclosed component is rendering its own header. The disclosed component is responsible for rendering\nthe appropriate controls to navigate the disclosure stack."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"Note: The DisclosureManagerHeaderAdapter is the preferred way to present a header within the SlidePanelManager.\nIn a future major release, the SlidePanelManager will ",(0,t.mdx)("strong",{parentName:"p"},"always")," render the header and navigation controls, regardless of the presence of a DisclosureManagerHeaderAdapter.")),(0,t.mdx)("h3",{id:"disclosure-accessory"},"Disclosure Accessory"),(0,t.mdx)("p",null,"The ",(0,t.mdx)("inlineCode",{parentName:"p"},"disclosureAccessory")," prop allows consumers of the SlidePanelManager to render a static component above the disclosed panel content.\nThe provided component will be rendered below the standard ActionHeader and above the disclosed content. This can be used to easily\nprovide additional context to every disclosed component. This component is provided once to the SlidePanelManager instance, not on a per-disclosure basis,\nand each component in the disclosure stack will be decorated with the same accessory component."),(0,t.mdx)("h3",{id:"example"},"Example"),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Button from 'terra-button';\nimport SlidePanelManager, { disclosureType } from 'terra-application/lib/slide-panel-manager';\nimport { withDisclosureManager, DisclosureManagerContext, DisclosureManagerHeaderAdapter } from 'terra-application/lib/disclosure-manager';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\n\nconst PanelComponentB = () => (\n  <React.Fragment>\n    <DisclosureManagerHeaderAdapter\n      title=\"Panel Component B\"\n    />\n    <p>I am PanelComponentB!</p>\n  </React.Fragment>\n);\n\nconst PanelComponentA = () => {\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n\n  return (\n    <div>\n      <DisclosureManagerHeaderAdapter\n        title=\"Panel Component A\"\n        collapsibleMenuView={<CollapsibleMenuView />}\n      />\n      <p>I am PanelComponentA!</p>\n      <Button\n        text=\"Disclose PanelComponentB\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'panel',\n            size: 'large',\n            content: {\n              key: 'panel-component-b-instance',\n              component: <PanelComponentB />\n            }\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nconst MyContentComponent = withDisclosureManager(({ disclosureManager }) => (\n  <div>\n    <p>I am MyContentComponent!</p>\n    <Button\n      text=\"Disclose PanelComponentA\"\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'panel',\n          size: 'large',\n          content: {\n            key: 'panel-component-a-instance',\n            component: <PanelComponentA />\n          }\n        });\n      }}\n    />\n  </div>\n));\n\nMyContentComponent.propTypes = {\n  disclosureManager: disclosureManagerShape,\n}\n\nconst MySlidePanelManagerComponent = () => (\n  <SlidePanelManager\n    disclosureAccessory={<div>Disclosure Accessory</div>}\n  >\n    <MyContentComponent />\n  </SlidePanelManager>\n);\n")))}f.isMDXComponent=!0}}]);