"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[23447],{23447:function(e,t,n){n.r(t),n.d(t,{default:function(){return p}});n(67294);var a=n(81254),r=["components"];function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d={},i="wrapper";function p(e){var t=e.components,n=m(e,r);return(0,a.mdx)(i,l({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"eventline"},"Eventline"),(0,a.mdx)("p",null,"An ",(0,a.mdx)("inlineCode",{parentName:"p"},"Eventline")," is a dotted line (by default) used to show an event occurring at a specific time.\nUnlike ",(0,a.mdx)("inlineCode",{parentName:"p"},"Dateline"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"Eventline")," does not have an indicator and therefore is not interactable.\nConsumers is expected to define the use-case accordingly."),(0,a.mdx)("p",null,"If ",(0,a.mdx)("inlineCode",{parentName:"p"},"eventLine")," is provided then the ",(0,a.mdx)("inlineCode",{parentName:"p"},"value")," property is mandatory."),(0,a.mdx)("p",null,"When using Eventline with graph then ",(0,a.mdx)("inlineCode",{parentName:"p"},"x axis type")," must be ",(0,a.mdx)("strong",{parentName:"p"},"timeseries"),"."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"#structure"},"Structure")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"#properties"},"Properties"),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"#style"},"style"))))),(0,a.mdx)("h2",{id:"structure"},"Structure"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json"},"  dateline:[\n    {\n      color: <hex value as string>,\n      value: <Date>,\n      style: <style object>\n    }\n  ]\n")),(0,a.mdx)("h2",{id:"properties"},"Properties"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},"Property Name"),(0,a.mdx)("th",{parentName:"tr",align:null},"Type"),(0,a.mdx)("th",{parentName:"tr",align:null},"Default"),(0,a.mdx)("th",{parentName:"tr",align:null},"Required"),(0,a.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"color"),(0,a.mdx)("td",{parentName:"tr",align:null},"string (ISO8601)"),(0,a.mdx)("td",{parentName:"tr",align:null},"-"),(0,a.mdx)("td",{parentName:"tr",align:null},"yes"),(0,a.mdx)("td",{parentName:"tr",align:null},"Value for the color of the eventline. Can be a hex value or constant from ",(0,a.mdx)("a",{parentName:"td",href:"./colors"},"Colors"),".")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"value"),(0,a.mdx)("td",{parentName:"tr",align:null},"Date"),(0,a.mdx)("td",{parentName:"tr",align:null},"-"),(0,a.mdx)("td",{parentName:"tr",align:null},"yes"),(0,a.mdx)("td",{parentName:"tr",align:null},"Position where eventline needs to be placed.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"style"),(0,a.mdx)("td",{parentName:"tr",align:null},"object"),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},'{strokeDashArray: "2,2"}')),(0,a.mdx)("td",{parentName:"tr",align:null},"no"),(0,a.mdx)("td",{parentName:"tr",align:null},"See ",(0,a.mdx)("a",{parentName:"td",href:"#style"},"style"),".")))),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("h3",{parentName:"li",id:"style"},(0,a.mdx)("inlineCode",{parentName:"h3"},"style")),(0,a.mdx)("p",{parentName:"li"},"Each line can have a style object in the values level."),(0,a.mdx)("pre",{parentName:"li"},(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"    style: { strokeDashArray: <string> },\n")),(0,a.mdx)("table",{parentName:"li"},(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},"Property Name"),(0,a.mdx)("th",{parentName:"tr",align:null},"Type"),(0,a.mdx)("th",{parentName:"tr",align:null},"Required"),(0,a.mdx)("th",{parentName:"tr",align:null},"Default"),(0,a.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},"strokeDashArray"),(0,a.mdx)("td",{parentName:"tr",align:null},"string"),(0,a.mdx)("td",{parentName:"tr",align:null},"no"),(0,a.mdx)("td",{parentName:"tr",align:null},'"0"'),(0,a.mdx)("td",{parentName:"tr",align:null},"Applies stroke-dasharray CSS property to the SVG line.")))))))}p.isMDXComponent=!0}}]);