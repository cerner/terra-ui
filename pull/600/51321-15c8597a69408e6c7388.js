"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[51321],{51321:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});t(67294);var a=t(81254),o=["components"];function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l={},i="wrapper";function s(e){var n=e.components,t=p(e,o);return(0,a.mdx)(i,r({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"building-components-which-include-translations"},"Building Components Which Include Translations"),(0,a.mdx)("p",null,"Below is an example of a component that renders a button with a hard-coded string."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\n\nconst Toggle = () => (\n  <button type=\"button\">Toggle</button>\n);\n")),(0,a.mdx)("p",null,"There are various ways to render the string as a translation with react-intl. We recommend using ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/yahoo/react-intl/wiki/Components#formattedmessage"},"react-intl's FormattedMessage component"),". Below is an example highlighting the use react-intl's formatted message component."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport { FormattedMessage } from 'react-intl';\n\nconst Toggle = () => (\n  <button type=\"button\">\n    <FormattedMessage id=\"App.toggle\" />\n  </button>\n);\n\nconst App = () => (\n  <ApplicationBase locale=\"en\">\n    <Toggle />\n  </ApplicationBase>\n);\n\nexport default App;\n")),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Note:")," ",(0,a.mdx)("em",{parentName:"p"},"The Terra Application Base component doesn't need to wrap individual components with translations, it should be used once to wrap the entire React app.")),(0,a.mdx)("p",null,"By default ",(0,a.mdx)("inlineCode",{parentName:"p"},"<FormattedMessage>")," will render the formatted string into a ",(0,a.mdx)("inlineCode",{parentName:"p"},"<span>"),". If you need to customize rendering, we recommend using the ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/yahoo/react-intl/wiki/Components#formattedmessage"},"render prop version of FormattedMessage"),"."),(0,a.mdx)("p",null,"For example, the terra-button component has a prop for text, however it only accepts strings. We can use the render prop version of the FormattedMessage component to pass a string to the button text prop like so:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport { FormattedMessage } from 'react-intl';\nimport Button from 'terra-button';\n\nconst Toggle = () => (\n  <FormattedMessage id=\"App.toggle\">\n    {txt => (\n      <Button text={txt} />\n    )}\n  </FormattedMessage>\n);\n\nconst App = () => (\n  <ApplicationBase locale=\"en\">\n    <Toggle />\n  </ApplicationBase>\n);\n\nexport default App;\n")),(0,a.mdx)("p",null,"This works well and is how we'd recommend rendering a string when a component's API requires a string. There are some props we need to keep as strings due to the fact that the underlying HTML attribute we pass the prop to only accepts string. As an example, let's say we have a component where the ",(0,a.mdx)("inlineCode",{parentName:"p"},"label")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"placeholder")," props map to ",(0,a.mdx)("inlineCode",{parentName:"p"},"aria-label")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"placeholder")," HTML attributes on an input."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Input from './Input';\n\n<Input label={localeLabel} placeholder={localePlaceholder) />\n")),(0,a.mdx)("p",null,"We could continue to use the render prop version of FormattedMessage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},'<FormattedMessage id="App.localeLabel">\n  {localeLabel => (\n    <FormattedMessage id="App.localePlaceholder">\n      {localePlaceHolder => (\n        <Input label={localeLabel} placeholder={localePlaceholder) />\n      )}\n    </FormattedMessage>\n  )}\n</FormattedMessage>\n')),(0,a.mdx)("p",null,"However, in this case, instead of nesting multiple FormattedMessage components, we'd recommend using ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/yahoo/react-intl/wiki/API#injectintl"},"react-intl's injectIntl higher-order component (HOC)"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { injectIntl, intlShape } from 'react-intl';\n\nconst propTypes = {\n  /**\n   * @private\n   * The intl object to be injected for translations. Provided by the injectIntl function.\n   */\n  intl: intlShape.isRequired,\n};\n\nconst Input = ({ intl }) => (\n  <input\n    aria-label={intl.formatMessage({ id: 'App.label' })}\n    placeholder={intl.formatMessage({ id: 'App.placeholder' })}\n  />\n);\n\nInput.propTypes = propTypes;\n\nexport default injectIntl(Input);\n")),(0,a.mdx)("p",null,"The react-intl repo contains additional examples that cover using variables, plurals, numbers, and additional use-cases which can be ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/yahoo/react-intl/tree/main/examples"},"found here"),"."))}s.isMDXComponent=!0}}]);