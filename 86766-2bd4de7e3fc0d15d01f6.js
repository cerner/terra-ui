"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[86766],{86766:function(e,n,r){r.r(n),r.d(n,{default:function(){return g}});r(96540);var t=r(36665),o=["components"];function l(){return l=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},l.apply(this,arguments)}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p={},i="wrapper";function g(e){var n=e.components,r=a(e,o);return(0,t.mdx)(i,l({},p,r,{components:n,mdxType:"MDXLayout"}),(0,t.mdx)("h1",{id:"logger"},"Logger"),(0,t.mdx)("p",null,(0,t.mdx)("inlineCode",{parentName:"p"},"terra-cli")," provides a logger for use when creating cli tools. It is built on top of the ",(0,t.mdx)("a",{parentName:"p",href:"https://github.com/npm/npmlog"},"npm logger")," and supports all log levels that the npm logger supports. It automatically provides a ",(0,t.mdx)("inlineCode",{parentName:"p"},"terra")," heading to group terra cli commands in one namespace and a ",(0,t.mdx)("inlineCode",{parentName:"p"},"prefix")," prop to group all logs from a given file together."),(0,t.mdx)("h2",{id:"example"},"Example"),(0,t.mdx)("p",null,"The following will log at the info level."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre"},"const { Logger } = require('@cerner/terra-cli');\n\nconst logger = new Logger({ prefix: '[test-logger]' });\n\nlogger.info('Logging something at the info level');\n")))}g.isMDXComponent=!0}}]);