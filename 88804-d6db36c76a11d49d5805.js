"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[88804],{2436:function(e,n,t){var o=t(64836),l=t(18698);n.Z=void 0;var i=o(t(861)),r=o(t(27424)),a=function(e,n){if(!n&&e&&e.__esModule)return e;if(null===e||"object"!==l(e)&&"function"!=typeof e)return{default:e};var t=s(n);if(t&&t.has(e))return t.get(e);var o={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if("default"!==r&&Object.prototype.hasOwnProperty.call(e,r)){var a=i?Object.getOwnPropertyDescriptor(e,r):null;a&&(a.get||a.set)?Object.defineProperty(o,r,a):o[r]=e[r]}o.default=e,t&&t.set(e,o);return o}(t(67294)),c=o(t(14312));function s(e){if("function"!=typeof WeakMap)return null;var n=new WeakMap,t=new WeakMap;return(s=function(e){return e?t:n})(e)}var d=[{id:"Column-0",displayName:"Patient"},{id:"Column-1",displayName:"Location"},{id:"Column-2",displayName:"Illness Severity"},{id:"Column-3",displayName:"Visit"},{id:"Column-4",displayName:"Allergy"},{id:"Column-5",displayName:"Primary Contact"},{id:"Column-6",displayName:"Generic Order Counts"},{id:"Column-7",displayName:"Patient Age"},{id:"Column-8",displayName:"Medication History"},{id:"Column-9",displayName:"My Relationship"},{id:"Column-10",displayName:"Not Selectable",isSelectable:!1}],u=[{id:"1",cells:[{content:"Fleck, Arthur"},{content:"1007-MTN"},{content:"Unstable"},{content:"Inpatient, 2 months"},{content:""},{content:"Quinzell, Harleen"},{content:""},{isMasked:!0},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]},{id:"2",cells:[{content:"Wayne, Bruce"},{content:"1007-MTN-DR"},{content:"Stable"},{content:"Outpatient, 2 days"},{content:"Phytochemicals"},{content:"Grayson, Richard"},{content:""},{content:""},{isMasked:!0},{content:"Admitting Physician"},{content:"",isSelectable:!1}]}],w=function(){var e=(0,a.useRef)(),n=d,t=u,o=(0,a.useState)([]),l=(0,r.default)(o,2),s=l[0],w=l[1],m=(0,a.useState)(!1),f=(0,r.default)(m,2),p=f[0],S=f[1],R=function(e,n){if(!n)return[];var t=[];return e?t=n:s.includes(n[0])?t=s.filter((function(e){return e!==n[0]})):(t=t.concat(s)).push(n[0]),t},y=function(){t.forEach((function(e){e.isSelected&&(e.isSelected=!1)})),w([])};return a.default.createElement(a.default.Fragment,null,a.default.createElement("div",null,a.default.createElement("label",{htmlFor:"rowSelectionMode"},a.default.createElement("b",null,"Row Selection Mode")),a.default.createElement("input",{id:"rowSelectionMode",type:"checkbox",ref:e,onChange:function(e){e.target.checked||y(),S(e.target.checked)}})),a.default.createElement(c.default,{id:"pinned-columns-with-row-selection",pinnedColumns:n.slice(0,3),overflowColumns:n.slice(3),rows:(0,i.default)(t),rowHeaderIndex:0,defaultColumnWidth:180,ariaLabel:"Worklist Data Grid with Pinned Columns and Row Selection",hasSelectableRows:p,onRowSelect:function(e){var n=[],o=t.find((function(n){return n.id===e}));o.isSelected=!o.isSelected,t.forEach((function(e){e.isSelected&&n.push(e.id)})),w(R(!1,n))},onRowSelectAll:function(){var e=[];t.forEach((function(n){n.isSelected=!0,e.push(n.id)})),w(R(!0,e))},onClearSelectedRows:function(){y()},onDisableSelectableRows:function(){e.current.checked=!1,S(!1),y()}}))};n.Z=w},13558:function(e,n,t){t.r(n),t.d(n,{default:function(){return y}});var o=t(67294),l=t(81254),i=t(2436),r=["components"];function a(){return a=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},a.apply(this,arguments)}function c(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s={};function d(e){var n=e.components,t=c(e,r);return(0,l.mdx)("wrapper",a({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState, useRef } from 'react';\nimport WorklistDataGrid from 'terra-worklist-data-grid';\n\nconst gridDataJSON = {\n  cols: [\n    { id: 'Column-0', displayName: 'Patient' },\n    { id: 'Column-1', displayName: 'Location' },\n    { id: 'Column-2', displayName: 'Illness Severity' },\n    { id: 'Column-3', displayName: 'Visit' },\n    { id: 'Column-4', displayName: 'Allergy' },\n    { id: 'Column-5', displayName: 'Primary Contact' },\n    { id: 'Column-6', displayName: 'Generic Order Counts' },\n    { id: 'Column-7', displayName: 'Patient Age' },\n    { id: 'Column-8', displayName: 'Medication History' },\n    { id: 'Column-9', displayName: 'My Relationship' },\n    { id: 'Column-10', displayName: 'Not Selectable', isSelectable: false },\n  ],\n  rows: [\n    {\n      id: '1',\n      cells: [\n        { content: 'Fleck, Arthur' },\n        { content: '1007-MTN' },\n        { content: 'Unstable' },\n        { content: 'Inpatient, 2 months' },\n        { content: '' },\n        { content: 'Quinzell, Harleen' },\n        { content: '' },\n        { isMasked: true },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n    {\n      id: '2',\n      cells: [\n        { content: 'Wayne, Bruce' },\n        { content: '1007-MTN-DR' },\n        { content: 'Stable' },\n        { content: 'Outpatient, 2 days' },\n        { content: 'Phytochemicals' },\n        { content: 'Grayson, Richard' },\n        { content: '' },\n        { content: '' },\n        { isMasked: true },\n        { content: 'Admitting Physician' },\n        { content: '', isSelectable: false },\n      ],\n    },\n  ],\n};\n\nconst RowSelection = () => {\n  const rowSelectionModeRef = useRef();\n  const rowHeaderIndex = 0;\n  const { cols, rows } = gridDataJSON;\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [hasSelectableRows, setHasSelectableRows] = useState(false);\n\n  const determineSelectedRows = (allRowsSelected, userSelectedRow) => {\n    if (!userSelectedRow) {\n      return [];\n    }\n\n    let remainingSelectedRow = [];\n    if (allRowsSelected) {\n      remainingSelectedRow = userSelectedRow;\n    } else if (selectedRows.includes(userSelectedRow[0])) {\n      // Row Deselected so remove this rowId.\n      remainingSelectedRow = selectedRows.filter(row => (row !== userSelectedRow[0]));\n    } else {\n      // Row Selected so add this rowId.\n      remainingSelectedRow = remainingSelectedRow.concat(selectedRows);\n      remainingSelectedRow.push(userSelectedRow[0]);\n    }\n    return remainingSelectedRow;\n  };\n\n  const clearRowSelection = () => {\n    // eslint-disable-next-line no-param-reassign\n    rows.forEach(r => { if (r.isSelected) { r.isSelected = false; } });\n    setSelectedRows([]);\n  };\n\n  const disableSelectableRows = () => {\n    rowSelectionModeRef.current.checked = false;\n    setHasSelectableRows(false);\n    clearRowSelection();\n  };\n\n  const onRowSelectionModeChange = (event) => {\n    if (!event.target.checked) {\n      clearRowSelection();\n    }\n    setHasSelectableRows(event.target.checked);\n  };\n\n  return (\n    <React.Fragment>\n      <div>\n        <label htmlFor=\"rowSelectionMode\"><b>Row Selection Mode</b></label>\n        <input\n          id=\"rowSelectionMode\"\n          type=\"checkbox\"\n          ref={rowSelectionModeRef}\n          onChange={onRowSelectionModeChange}\n        />\n      </div>\n      <WorklistDataGrid\n        id=\"pinned-columns-with-row-selection\"\n        pinnedColumns={cols.slice(0, 3)}\n        overflowColumns={cols.slice(3)}\n        rows={[...rows]}\n        rowHeaderIndex={rowHeaderIndex}\n        defaultColumnWidth={180}\n        ariaLabel=\"Worklist Data Grid with Pinned Columns and Row Selection\"\n        hasSelectableRows={hasSelectableRows}\n        onRowSelect={(rowId) => {\n          const newRows = [];\n          const selectedRow = rows.find(row => row.id === rowId);\n          selectedRow.isSelected = !selectedRow.isSelected;\n          rows.forEach(element => {\n            if (element.isSelected) {\n              newRows.push(element.id);\n            }\n          });\n          setSelectedRows(determineSelectedRows(false, newRows));\n        }}\n        onRowSelectAll={() => {\n          const newRows = [];\n          // eslint-disable-next-line no-param-reassign\n          rows.forEach(row => { row.isSelected = true; newRows.push(row.id); });\n          setSelectedRows(determineSelectedRows(true, newRows));\n        }}\n        onClearSelectedRows={() => {\n          clearRowSelection();\n        }}\n        onDisableSelectableRows={() => {\n          disableSelectableRows();\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default RowSelection;\n\n")))}d.isMDXComponent=!0;var u=t(49271),w=function(e){var n=e.title,t=e.description,l=e.isExpanded;return o.createElement(u.Z,{title:n||"Pinned Columns With Row Selection",description:t,example:o.createElement(i.Z,null),exampleSrc:o.createElement(d,null),isExpanded:l})},m=["components"];function f(){return f=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},f.apply(this,arguments)}function p(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var S={},R="wrapper";function y(e){var n=e.components,t=p(e,m);return(0,l.mdx)(R,f({},S,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)(w,{title:"Worklist Data Grid with Pinned Columns and Row Selection",mdxType:"PinnedColumnsWithRowSelection"}))}y.isMDXComponent=!0}}]);