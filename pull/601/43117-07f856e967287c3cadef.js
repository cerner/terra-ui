"use strict";(self.webpackChunkterra_ui=self.webpackChunkterra_ui||[]).push([[43117],{43117:function(n,a,e){e.r(a),e.d(a,{default:function(){return c}});e(67294);var t=e(81254),o=["components"];function r(){return r=Object.assign?Object.assign.bind():function(n){for(var a=1;a<arguments.length;a++){var e=arguments[a];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])}return n},r.apply(this,arguments)}function i(n,a){if(null==n)return{};var e,t,o=function(n,a){if(null==n)return{};var e,t,o={},r=Object.keys(n);for(t=0;t<r.length;t++)e=r[t],a.indexOf(e)>=0||(o[e]=n[e]);return o}(n,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)e=r[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var p={},l="wrapper";function c(n){var a=n.components,e=i(n,o);return(0,t.mdx)(l,r({},p,e,{components:a,mdxType:"MDXLayout"}),(0,t.mdx)("h1",{id:"how-to-show-loading-overlays"},"How To Show Loading Overlays"),(0,t.mdx)("p",null,"Loading overlays can be rendered within the framework by rendering an ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/application-loading-overlay"},"ApplicationLoadingOverlay")," component. Overlays will be rendered by the closest ancestor ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/application-loading-overlay-provider"},"ApplicationLoadingOverlayProvider"),". All content rendered within the responsding ApplicationLoadingOverlayProvider will be overlaid."),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport ApplicationLoadingOverlay from 'terra-application/lib/application-loading-overlay';\n\nconst ExampleComponent = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div>\n      <p>This component toggles a loading state that lasts for 3 seconds.</p>\n      <p>\n        <button type=\"button\" onClick={() => {\n          setIsLoading(true);\n\n          setTimeout(() => {\n            setIsLoading(false);\n          }, 3000);\n        }}>\n          Start Loading\n        </button>\n      </p>\n      <ApplicationLoadingOverlay isOpen={isLoading} />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n")),(0,t.mdx)("p",null,"Any component that wants to create an overlay container for its children can render its own ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/application-loading-overlay-provider"},"ApplicationLoadingOverlayProvider")," to scope overlay presentation to that container."),(0,t.mdx)("blockquote",null,(0,t.mdx)("p",{parentName:"blockquote"},"Note: ApplicationLoadingOverlayProviders are provided by ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/application-base"},"ApplicationBase"),", ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/application-navigation"},"ApplicationNavigation"),", ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/modal-manager"},"ModalManager")," and the ",(0,t.mdx)("a",{parentName:"p",href:"/terra-ui/pull/601/application/terra-application/components/slide-panel-manager"},"SlidePanelManager"),".")))}c.isMDXComponent=!0}}]);